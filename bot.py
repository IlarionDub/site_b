# python3 bot.py

import logging
import os
import re
from dotenv import load_dotenv
from telegram import Update, Message, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from openai import OpenAI

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è .env
load_dotenv()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    logger.error("‚ùå TELEGRAM_BOT_TOKEN –∞–±–æ OPENAI_API_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    exit()

# OpenAI –∫–ª—ñ—î–Ω—Ç
client = OpenAI(api_key=OPENAI_API_KEY)

# –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
chat_message_history = {}  # {chat_id: [msg_id1, msg_id2]}


# üîß –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –µ–∫—Ä–∞–Ω—É–≤–∞–Ω–Ω—è MarkdownV2
def escape_markdown(text: str) -> str:
    return re.sub(r'([_*\[\]()~`>#+\-=|{}.!])', r'\\\1', text)


# üßπ –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def delete_old_messages(context: ContextTypes.DEFAULT_TYPE, chat_id: int):
    if chat_id in chat_message_history:
        for msg_id in chat_message_history[chat_id]:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –í–∏–¥–∞–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è: {e}")
        chat_message_history[chat_id] = []


# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    await delete_old_messages(context, chat_id)

    try:
        await update.message.delete()
    except:
        pass

    sent = await context.bot.send_message(
        chat_id=chat_id,
        text="üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –∑–∞–≤–¥–∞–Ω–Ω—è, —ñ —è –∑–≥–µ–Ω–µ—Ä—É—é Java-–∫–æ–¥ –∑ –ø–∞—Ç–µ—Ä–Ω–∞–º–∏ –ø—Ä–æ—î–∫—Ç—É–≤–∞–Ω–Ω—è."
    )
    chat_message_history[chat_id] = [sent.message_id]


# –û–±—Ä–æ–±–∫–∞ –∑–≤–∏—á–∞–π–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    user_msg: Message = update.message
    user_text = user_msg.text
    logger.info(f"[{chat_id}] –í—Ö—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {user_text}")

    await delete_old_messages(context, chat_id)

    try:
        await user_msg.delete()
    except:
        pass

    processing = await context.bot.send_message(chat_id=chat_id, text="‚è≥ –û–±—Ä–æ–±–ª—è—é –∑–∞–ø–∏—Ç...")
    msg_ids = [processing.message_id]

    try:
        prompt_messages = [
            {
                "role": "system",
                "content": (
                    "–¢–∏ ‚Äì –µ–∫—Å–ø–µ—Ä—Ç –∑ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –Ω–∞ Java —Ç–∞ –ø–∞—Ç–µ—Ä–Ω—ñ–≤ –ø—Ä–æ—î–∫—Ç—É–≤–∞–Ω–Ω—è. "
                    "–ó–≥–µ–Ω–µ—Ä—É–π –ø–æ–≤–Ω–∏–π, –≥–æ—Ç–æ–≤–∏–π –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Java-–∫–æ–¥. –ë–µ–∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤, –±–µ–∑ –æ–ø–∏—Å—ñ–≤, –ª–∏—à–µ –∫–æ–¥. –û–∫—Ä—ñ–º –∫–æ–¥–∞ –Ω—ñ—è–∫—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –∞–±–æ –ª–∞–ø–∫–∏, —Ç—ñ–ª—å–∫–∏ –∫–æ–¥"
                )
            },
            {
                "role": "user",
                "content": f"–ó–≥–µ–Ω–µ—Ä—É–π Java-–∫–æ–¥ –¥–ª—è: {user_text}"
            }
        ]

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=prompt_messages,
            temperature=0.2,
        )

        generated_code = response.choices[0].message.content.strip()

        try:
            await processing.delete()
        except:
            pass

        if len(generated_code) < 4000:
            try:
                formatted = f"```java\n{escape_markdown(generated_code)}\n```"
                sent = await context.bot.send_message(chat_id=chat_id, text=formatted, parse_mode="MarkdownV2")
            except Exception as e_md:
                logger.warning(f"‚ö†Ô∏è MarkdownV2 –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {e_md}")
                sent = await context.bot.send_message(chat_id=chat_id, text=generated_code)
        else:
            with open("code.java", "w", encoding="utf-8") as f:
                f.write(generated_code)
            with open("code.java", "rb") as f:
                sent = await context.bot.send_document(chat_id=chat_id, document=InputFile(f, filename="code.java"))

        msg_ids.append(sent.message_id)

    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        sent = await context.bot.send_message(chat_id=chat_id, text=f"‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")
        msg_ids.append(sent.message_id)

    chat_message_history[chat_id] = msg_ids


def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!")
    application.run_polling()


if __name__ == "__main__":
    main()